/* The following code was generated by JFlex 1.4.1 on 26/07/15 10:49 */

package procast.controlador;

import java.awt.Rectangle;
import java.io.*;   
import javax.swing.text.Segment;   
import javax.swing.text.TabExpander;

import org.fife.ui.rsyntaxtextarea.*;   


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 26/07/15 10:49 from the specification file
 * <tt>D:/UNSA/07 SEMESTRE/03 Compiladores/Software/LeMa 1.7/ProCast/src/procast/controlador/LeMaHighLighter.flex</tt>
 */
public class LeMaTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\7\2\0\1\4\22\0\1\4\1\27\1\42\2\0"+
    "\1\27\1\35\1\30\1\24\1\24\1\6\1\25\1\43\1\26\1\40"+
    "\1\5\1\37\10\2\1\2\1\30\1\43\1\27\1\34\1\27\1\30"+
    "\1\0\6\3\24\1\1\24\1\0\1\24\1\30\1\1\1\0\1\16"+
    "\1\1\1\10\1\23\1\20\1\45\1\1\1\44\1\17\2\1\1\22"+
    "\1\32\1\12\1\11\1\33\1\1\1\21\1\13\1\14\1\31\1\15"+
    "\1\1\1\41\2\1\1\24\1\36\1\24\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\10\2\1\6"+
    "\3\5\2\2\2\1\1\3\1\1\2\2\2\7\1\10"+
    "\1\0\1\11\1\12\3\2\1\13\15\2\2\0\1\14"+
    "\1\2\1\15\1\3\24\2\1\3\2\2\1\13\3\2"+
    "\1\16\5\2\1\17\5\2\1\0\13\2\1\3\16\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\114\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\114\0\u023a\0\u0260\0\114\0\u0286\0\u02ac\0\u02d2\0\u02f8"+
    "\0\u031e\0\u0344\0\114\0\u036a\0\u0390\0\u03b6\0\114\0\u03dc"+
    "\0\u0402\0\114\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6"+
    "\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616"+
    "\0\u063c\0\u0662\0\u0688\0\u06ae\0\u0344\0\114\0\u06d4\0\114"+
    "\0\u03dc\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de"+
    "\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\162\0\u0a64\0\u0a8a\0\u0ab0\0\162\0\u0ad6\0\u0afc\0\u0b22"+
    "\0\u0b48\0\u0b6e\0\162\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c"+
    "\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c"+
    "\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0c52\0\u0e1a\0\u0e40\0\u0e66"+
    "\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96"+
    "\0\u0fbc\0\u0fe2\0\u1008";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\6"+
    "\1\11\2\4\1\12\1\13\1\14\1\4\1\15\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\10\1\24"+
    "\1\4\1\25\1\26\1\10\1\27\1\30\1\31\1\3"+
    "\1\4\1\32\1\33\1\34\1\4\6\35\1\36\1\37"+
    "\36\35\47\0\3\4\4\0\14\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\2\0\1\5\34\0"+
    "\1\5\1\40\12\0\1\41\1\42\25\0\1\24\45\0"+
    "\1\24\12\0\3\4\4\0\1\4\1\43\4\4\1\44"+
    "\5\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\6\4\1\45\1\46\1\47"+
    "\3\4\5\0\1\50\2\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\11\4\1\51\2\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\6\4\1\52\5\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\2\4\1\53\11\4\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\2\4"+
    "\1\54\11\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\10\4\1\55\3\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\10\4\1\56\3\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\25\0\1\24"+
    "\6\0\1\24\37\0\1\24\5\0\1\24\12\0\3\4"+
    "\4\0\1\4\1\57\5\4\1\60\4\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\1\4\1\61\4\4\1\62\2\4\1\63\2\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\35\0\1\24\46\0\1\24\11\0\1\5\34\0\1\5"+
    "\1\40\1\64\4\0\7\65\1\0\32\65\1\66\3\65"+
    "\1\0\3\4\4\0\6\4\1\67\5\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\6\35\2\0"+
    "\36\35\5\0\1\70\42\0\1\71\34\0\1\71\6\0"+
    "\7\41\1\0\36\41\1\0\3\4\4\0\2\4\1\72"+
    "\11\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\3\4\1\73\7\4\1\74"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\12\4\1\75\1\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\2\4\1\73\11\4\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\12\4"+
    "\1\76\1\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\14\4\5\0\1\4"+
    "\1\77\1\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\6\4\1\100\5\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\1\101\13\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\5\4\1\102"+
    "\6\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\4\4\1\103\7\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\3\4\1\104\1\105\1\4\1\106\5\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\10\4\1\107\3\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\3\4\1\110\10\4\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\10\4"+
    "\1\111\3\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\11\4\1\112\2\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\11\4\1\113\2\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\1\4\1\114\5\4\1\115\4\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\2\0\2\116"+
    "\33\0\1\116\7\0\3\4\4\0\1\117\13\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\3\4\1\120\10\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\1\4\1\121\12\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\10\4\1\122"+
    "\3\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\4\4\1\123\7\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\10\4\1\124\3\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\6\4\1\125\5\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\2\4\1\126"+
    "\11\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\7\4\1\127\4\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\10\4\1\130\3\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\10\4\1\131\3\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\4\4\1\77"+
    "\7\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\1\4\1\132\12\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\12\4\1\133\1\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\11\4\1\125\2\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\4\4\1\134"+
    "\7\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\2\4\1\135\11\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\13\4\1\136\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\6\4"+
    "\1\121\5\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\13\4\1\137\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\2\4\1\140\11\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\2\0\2\116\33\0"+
    "\1\116\1\141\6\0\3\4\4\0\10\4\1\142\3\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\4\4\1\133\7\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\2\4\1\143\11\4\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\6\4"+
    "\1\142\5\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\1\144\13\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\3\4\1\145\10\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\1\4\1\133\12\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\11\4\1\146"+
    "\2\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\11\4\1\127\2\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\11\4\1\147\2\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\11\4\1\150\2\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\4\4\1\151"+
    "\7\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\10\4\1\152\3\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\14\4\5\0\1\153\2\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\1\154"+
    "\13\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\2\0\2\155\33\0\1\155\7\0\3\4\4\0"+
    "\11\4\1\121\2\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\6\4\1\133"+
    "\5\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\4\4\1\156\7\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\14\4\5\0\2\4\1\157\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\3\4"+
    "\1\77\10\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\2\4\1\123\11\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\3\4\4\0\6\4\1\107\5\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\11\4\1\160\2\4\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\14\4"+
    "\5\0\3\4\3\0\1\4\1\0\1\4\2\0\1\4"+
    "\1\161\1\0\3\4\4\0\1\162\13\4\5\0\3\4"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\7\4\1\163\4\4\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\1\4"+
    "\1\142\12\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\14\4\5\0\1\164"+
    "\2\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\6\4\1\165\5\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\10\4\1\166\3\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\4\4\1\167"+
    "\7\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\14\4\5\0\2\4\1\170"+
    "\3\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4"+
    "\4\0\10\4\1\171\3\4\5\0\3\4\3\0\1\4"+
    "\1\0\1\4\2\0\2\4\1\0\3\4\4\0\3\4"+
    "\1\121\10\4\5\0\3\4\3\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\3\4\4\0\1\172\13\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\1\4\1\125\12\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\3\4\4\0"+
    "\6\4\1\173\5\4\5\0\3\4\3\0\1\4\1\0"+
    "\1\4\2\0\2\4\1\0\3\4\4\0\3\4\1\104"+
    "\10\4\5\0\3\4\3\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\3\4\4\0\4\4\1\73\7\4\5\0"+
    "\3\4\3\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\3\4\4\0\12\4\1\121\1\4\5\0\3\4\3\0"+
    "\1\4\1\0\1\4\2\0\2\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4142];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\12\1\1\11\2\1\1\11"+
    "\6\1\1\11\3\1\1\11\1\0\1\1\1\11\21\1"+
    "\2\0\1\11\1\1\1\11\50\1\1\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public LeMaTokenMaker()
    {   
    }   
 
    private void addHyperlinkToken(int start, int end, int tokenType)
    {   
        int so = start + offsetShift;   
        addToken(zzBuffer, start,end, tokenType, so, true);   
    }   

    private void addToken(int tokenType)
    {   
        addToken(zzStartRead, zzMarkedPos-1, tokenType);   
    }   
 
    private void addToken(int start, int end, int tokenType)
    {   
        int so = start + offsetShift;   
        addToken(zzBuffer, start,end, tokenType, so, false);   
    }   

    public void addToken(char[] array, int start, int end, int tokenType, int startOffset, boolean hyperlink)
    {   
        super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
        zzStartRead = zzMarkedPos;   
    }   

    public Token getTokenList(Segment text, int initialTokenType, int startOffset)
    {
        resetTokenList();   
        this.offsetShift = -text.offset + startOffset;   
        
        int state = Token.NULL;
        switch (initialTokenType)
        {
            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;

            default:
                state = Token.NULL;
        }

        s = text;
        try
        {
           yyreset(zzReader);
           yybegin(state);
           return yylex();
        }
        catch (IOException ioe)
        {
           ioe.printStackTrace();
           return new Token() {

               @Override
               public StringBuilder appendHTMLRepresentation(StringBuilder sb, RSyntaxTextArea rsta, boolean bln)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public StringBuilder appendHTMLRepresentation(StringBuilder sb, RSyntaxTextArea rsta, boolean bln, boolean bln1)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public char charAt(int i)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean containsPosition(int i)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int documentToToken(int i)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean endsWith(char[] chars)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int getEndOffset()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public String getHTMLRepresentation(RSyntaxTextArea rsta)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int getLanguageIndex()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public Token getLastNonCommentNonWhitespaceToken()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public Token getLastPaintableToken()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public String getLexeme()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int getListOffset(RSyntaxTextArea rsta, TabExpander te, float f, float f1)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public Token getNextToken()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int getOffset()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int getOffsetBeforeX(RSyntaxTextArea rsta, TabExpander te, float f, float f1)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public char[] getTextArray()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int getTextOffset()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int getType()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public float getWidth(RSyntaxTextArea rsta, TabExpander te, float f)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public float getWidthUpTo(int i, RSyntaxTextArea rsta, TabExpander te, float f)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean is(char[] chars)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean is(int i, char[] chars)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean is(int i, String string)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isComment()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isCommentOrWhitespace()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isHyperlink()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isIdentifier()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isLeftCurly()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isRightCurly()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isPaintable()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isSingleChar(char c)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isSingleChar(int i, char c)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean isWhitespace()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int length()
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public Rectangle listOffsetToView(RSyntaxTextArea rsta, TabExpander te, int i, int i1, Rectangle rctngl)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void setHyperlink(boolean bln)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void setLanguageIndex(int i)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public void setType(int i)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public boolean startsWith(char[] chars)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }

               @Override
               public int tokenToDocument(int i)
               {
                   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               }
           };
        }
    }

    private boolean zzRefill()
    {
       return zzCurrentPos>=s.offset+s.count;
    }

    public final void yyreset(Reader reader)
    {
       zzBuffer = s.array;
       zzStartRead = s.offset;
       zzEndRead = zzStartRead + s.count - 1;
       zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
       zzLexicalState = YYINITIAL;
       zzReader = reader;
       zzAtBOL  = true;
       zzAtEOF  = false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LeMaTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LeMaTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { addToken(Token.RESERVED_WORD);
          }
        case 16: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 17: break;
        case 14: 
          { addToken(Token.FUNCTION);
          }
        case 18: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 19: break;
        case 9: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 20: break;
        case 13: 
          { yybegin(YYINITIAL);
                                             addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 21: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 22: break;
        case 15: 
          { addToken(Token.DATA_TYPE);
          }
        case 23: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 24: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 25: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 26: break;
        case 10: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 27: break;
        case 8: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE);
                                             return firstToken;
          }
        case 28: break;
        case 7: 
          { 
          }
        case 29: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 124: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE);
                                             return firstToken;
            }
            case 125: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
